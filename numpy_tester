#    ------- 2.3 Vector manipulation with numpy --------

import random
import numpy as np

# create function that creates random 3d vectors and stores as (1,3) numpy arrays

def create_rand_np_vect():
    random_vector =  np.array([random.randint(0,9), random.randint(0,9), random.randint(0,9)], float)
    return random_vector

# create 3 random 3d vectors
    
v1 = create_rand_np_vect()
v2 = create_rand_np_vect()
v3 = create_rand_np_vect()

# create function that checks identity v1 x v2 = −v2 x v1

def check_anti_commutative_np(vector1,vector2):
    LHS = np.cross(vector1,vector2) # gives left hand side
    RHS = -(np.cross(vector2,vector1)) # gives right hand side
    if np.array_equal(LHS,RHS) == True: # hence checks both sides of the equation equal
        return True
    else:
        return False

# create function that checks v1 × (v2 + v3) = (v1 × v2) + (v1 × v3)

def check_distributive_np(vector1,vector2,vector3):
    LHS = np.cross(vector1,(vector2 + vector3)) # gives left hand side
    RHS = np.cross(vector1,vector2) + np.cross(vector1,vector3) # gives right hand side
    if np.array_equal(LHS,RHS) == True: # hence checks both sides of the equation equal
        return True
    else:
        return False

# create function that checks v1 × (v2 × v3) = (v1 · v3)v2 − (v1 · v2)v3

def check_vector_triple_product_np(vector1,vector2,vector3):
    LHS = np.cross(vector1, np.cross(vector2, vector3)) # gives left hand side
    RHS = np.inner(vector1, vector3)*vector2 - np.inner(vector1, vector2)*vector3 # gives right hand side
    if np.array_equal(LHS,RHS) == True: # hence checks both sides of the equation equal
        return True
    else:
        return False

print(check_vector_triple_product_np(v1,v2,v3))

def main_np():

    # print these random vectors and their magnitudes

    print("v1 = " + str(v1) + ", and is of magnitude " + str(np.linalg.norm(v1)))
    print("v2 = " + str(v2) + ", and is of magnitude " + str(np.linalg.norm(v2)))
    print("v3 = " + str(v3) + ", and is of magnitude " + str(np.linalg.norm(v3)))

    # printing the sum, dot product and cross product of v1 and v2

    print("The vector sum of v1 and v2 is " + str(v1 + v2))
    print("The dot product of v1 and v2 is " + str(np.inner(v1,v2)))
    print("The cross product v1 x v2 is " + str(np.cross(v1,v2)))

    # printing the results of these checks because why not 

    print("Using Vectors v1,v2 and v3, the following vector identities are shown to be (hopefully) True:")
    print("v1 × v2 = −v2 × v1 : " + str(check_anti_commutative_np(v1,v2)))
    print("v1 × (v2 + v3) = (v1 × v2) + (v1 × v3) : " + str(check_distributive_np(v1,v2,v3)))
    print("v1 × (v2 × v3) = (v1 · v3)v2 − (v1 · v2)v3 : " + str(check_vector_triple_product_np(v1,v2,v3)))


main_np()
